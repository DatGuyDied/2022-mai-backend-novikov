// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/DatGuyDied/2022-mai-backend-novikov/ent/usermessage"
)

// UserMessage is the model entity for the UserMessage schema.
type UserMessage struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// From holds the value of the "from" field.
	From string `json:"from,omitempty"`
	// To holds the value of the "to" field.
	To string `json:"to,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// CtreatedAt holds the value of the "ctreated_at" field.
	CtreatedAt time.Time `json:"ctreated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserMessage) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case usermessage.FieldID:
			values[i] = new(sql.NullInt64)
		case usermessage.FieldFrom, usermessage.FieldTo, usermessage.FieldText:
			values[i] = new(sql.NullString)
		case usermessage.FieldCtreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserMessage", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserMessage fields.
func (um *UserMessage) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usermessage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			um.ID = int(value.Int64)
		case usermessage.FieldFrom:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field from", values[i])
			} else if value.Valid {
				um.From = value.String
			}
		case usermessage.FieldTo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field to", values[i])
			} else if value.Valid {
				um.To = value.String
			}
		case usermessage.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				um.Text = value.String
			}
		case usermessage.FieldCtreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ctreated_at", values[i])
			} else if value.Valid {
				um.CtreatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this UserMessage.
// Note that you need to call UserMessage.Unwrap() before calling this method if this UserMessage
// was returned from a transaction, and the transaction was committed or rolled back.
func (um *UserMessage) Update() *UserMessageUpdateOne {
	return (&UserMessageClient{config: um.config}).UpdateOne(um)
}

// Unwrap unwraps the UserMessage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (um *UserMessage) Unwrap() *UserMessage {
	tx, ok := um.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserMessage is not a transactional entity")
	}
	um.config.driver = tx.drv
	return um
}

// String implements the fmt.Stringer.
func (um *UserMessage) String() string {
	var builder strings.Builder
	builder.WriteString("UserMessage(")
	builder.WriteString(fmt.Sprintf("id=%v", um.ID))
	builder.WriteString(", from=")
	builder.WriteString(um.From)
	builder.WriteString(", to=")
	builder.WriteString(um.To)
	builder.WriteString(", text=")
	builder.WriteString(um.Text)
	builder.WriteString(", ctreated_at=")
	builder.WriteString(um.CtreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserMessages is a parsable slice of UserMessage.
type UserMessages []*UserMessage

func (um UserMessages) config(cfg config) {
	for _i := range um {
		um[_i].config = cfg
	}
}
