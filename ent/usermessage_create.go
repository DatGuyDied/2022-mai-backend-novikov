// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DatGuyDied/2022-mai-backend-novikov/ent/usermessage"
)

// UserMessageCreate is the builder for creating a UserMessage entity.
type UserMessageCreate struct {
	config
	mutation *UserMessageMutation
	hooks    []Hook
}

// SetFrom sets the "from" field.
func (umc *UserMessageCreate) SetFrom(s string) *UserMessageCreate {
	umc.mutation.SetFrom(s)
	return umc
}

// SetTo sets the "to" field.
func (umc *UserMessageCreate) SetTo(s string) *UserMessageCreate {
	umc.mutation.SetTo(s)
	return umc
}

// SetText sets the "text" field.
func (umc *UserMessageCreate) SetText(s string) *UserMessageCreate {
	umc.mutation.SetText(s)
	return umc
}

// SetCtreatedAt sets the "ctreated_at" field.
func (umc *UserMessageCreate) SetCtreatedAt(t time.Time) *UserMessageCreate {
	umc.mutation.SetCtreatedAt(t)
	return umc
}

// SetNillableCtreatedAt sets the "ctreated_at" field if the given value is not nil.
func (umc *UserMessageCreate) SetNillableCtreatedAt(t *time.Time) *UserMessageCreate {
	if t != nil {
		umc.SetCtreatedAt(*t)
	}
	return umc
}

// Mutation returns the UserMessageMutation object of the builder.
func (umc *UserMessageCreate) Mutation() *UserMessageMutation {
	return umc.mutation
}

// Save creates the UserMessage in the database.
func (umc *UserMessageCreate) Save(ctx context.Context) (*UserMessage, error) {
	var (
		err  error
		node *UserMessage
	)
	umc.defaults()
	if len(umc.hooks) == 0 {
		if err = umc.check(); err != nil {
			return nil, err
		}
		node, err = umc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = umc.check(); err != nil {
				return nil, err
			}
			umc.mutation = mutation
			if node, err = umc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(umc.hooks) - 1; i >= 0; i-- {
			if umc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = umc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, umc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (umc *UserMessageCreate) SaveX(ctx context.Context) *UserMessage {
	v, err := umc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (umc *UserMessageCreate) Exec(ctx context.Context) error {
	_, err := umc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umc *UserMessageCreate) ExecX(ctx context.Context) {
	if err := umc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (umc *UserMessageCreate) defaults() {
	if _, ok := umc.mutation.CtreatedAt(); !ok {
		v := usermessage.DefaultCtreatedAt()
		umc.mutation.SetCtreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (umc *UserMessageCreate) check() error {
	if _, ok := umc.mutation.From(); !ok {
		return &ValidationError{Name: "from", err: errors.New(`ent: missing required field "UserMessage.from"`)}
	}
	if _, ok := umc.mutation.To(); !ok {
		return &ValidationError{Name: "to", err: errors.New(`ent: missing required field "UserMessage.to"`)}
	}
	if _, ok := umc.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`ent: missing required field "UserMessage.text"`)}
	}
	if _, ok := umc.mutation.CtreatedAt(); !ok {
		return &ValidationError{Name: "ctreated_at", err: errors.New(`ent: missing required field "UserMessage.ctreated_at"`)}
	}
	return nil
}

func (umc *UserMessageCreate) sqlSave(ctx context.Context) (*UserMessage, error) {
	_node, _spec := umc.createSpec()
	if err := sqlgraph.CreateNode(ctx, umc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (umc *UserMessageCreate) createSpec() (*UserMessage, *sqlgraph.CreateSpec) {
	var (
		_node = &UserMessage{config: umc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: usermessage.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: usermessage.FieldID,
			},
		}
	)
	if value, ok := umc.mutation.From(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usermessage.FieldFrom,
		})
		_node.From = value
	}
	if value, ok := umc.mutation.To(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usermessage.FieldTo,
		})
		_node.To = value
	}
	if value, ok := umc.mutation.Text(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usermessage.FieldText,
		})
		_node.Text = value
	}
	if value, ok := umc.mutation.CtreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usermessage.FieldCtreatedAt,
		})
		_node.CtreatedAt = value
	}
	return _node, _spec
}

// UserMessageCreateBulk is the builder for creating many UserMessage entities in bulk.
type UserMessageCreateBulk struct {
	config
	builders []*UserMessageCreate
}

// Save creates the UserMessage entities in the database.
func (umcb *UserMessageCreateBulk) Save(ctx context.Context) ([]*UserMessage, error) {
	specs := make([]*sqlgraph.CreateSpec, len(umcb.builders))
	nodes := make([]*UserMessage, len(umcb.builders))
	mutators := make([]Mutator, len(umcb.builders))
	for i := range umcb.builders {
		func(i int, root context.Context) {
			builder := umcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, umcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, umcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, umcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (umcb *UserMessageCreateBulk) SaveX(ctx context.Context) []*UserMessage {
	v, err := umcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (umcb *UserMessageCreateBulk) Exec(ctx context.Context) error {
	_, err := umcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umcb *UserMessageCreateBulk) ExecX(ctx context.Context) {
	if err := umcb.Exec(ctx); err != nil {
		panic(err)
	}
}
