// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/DatGuyDied/2022-mai-backend-novikov/ent/predicate"
	"github.com/DatGuyDied/2022-mai-backend-novikov/ent/usermessage"
)

// UserMessageUpdate is the builder for updating UserMessage entities.
type UserMessageUpdate struct {
	config
	hooks    []Hook
	mutation *UserMessageMutation
}

// Where appends a list predicates to the UserMessageUpdate builder.
func (umu *UserMessageUpdate) Where(ps ...predicate.UserMessage) *UserMessageUpdate {
	umu.mutation.Where(ps...)
	return umu
}

// SetFrom sets the "from" field.
func (umu *UserMessageUpdate) SetFrom(s string) *UserMessageUpdate {
	umu.mutation.SetFrom(s)
	return umu
}

// SetTo sets the "to" field.
func (umu *UserMessageUpdate) SetTo(s string) *UserMessageUpdate {
	umu.mutation.SetTo(s)
	return umu
}

// SetText sets the "text" field.
func (umu *UserMessageUpdate) SetText(s string) *UserMessageUpdate {
	umu.mutation.SetText(s)
	return umu
}

// SetCtreatedAt sets the "ctreated_at" field.
func (umu *UserMessageUpdate) SetCtreatedAt(t time.Time) *UserMessageUpdate {
	umu.mutation.SetCtreatedAt(t)
	return umu
}

// SetNillableCtreatedAt sets the "ctreated_at" field if the given value is not nil.
func (umu *UserMessageUpdate) SetNillableCtreatedAt(t *time.Time) *UserMessageUpdate {
	if t != nil {
		umu.SetCtreatedAt(*t)
	}
	return umu
}

// Mutation returns the UserMessageMutation object of the builder.
func (umu *UserMessageUpdate) Mutation() *UserMessageMutation {
	return umu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (umu *UserMessageUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(umu.hooks) == 0 {
		affected, err = umu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			umu.mutation = mutation
			affected, err = umu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(umu.hooks) - 1; i >= 0; i-- {
			if umu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = umu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, umu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (umu *UserMessageUpdate) SaveX(ctx context.Context) int {
	affected, err := umu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (umu *UserMessageUpdate) Exec(ctx context.Context) error {
	_, err := umu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umu *UserMessageUpdate) ExecX(ctx context.Context) {
	if err := umu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (umu *UserMessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usermessage.Table,
			Columns: usermessage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: usermessage.FieldID,
			},
		},
	}
	if ps := umu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := umu.mutation.From(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usermessage.FieldFrom,
		})
	}
	if value, ok := umu.mutation.To(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usermessage.FieldTo,
		})
	}
	if value, ok := umu.mutation.Text(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usermessage.FieldText,
		})
	}
	if value, ok := umu.mutation.CtreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usermessage.FieldCtreatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, umu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usermessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UserMessageUpdateOne is the builder for updating a single UserMessage entity.
type UserMessageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMessageMutation
}

// SetFrom sets the "from" field.
func (umuo *UserMessageUpdateOne) SetFrom(s string) *UserMessageUpdateOne {
	umuo.mutation.SetFrom(s)
	return umuo
}

// SetTo sets the "to" field.
func (umuo *UserMessageUpdateOne) SetTo(s string) *UserMessageUpdateOne {
	umuo.mutation.SetTo(s)
	return umuo
}

// SetText sets the "text" field.
func (umuo *UserMessageUpdateOne) SetText(s string) *UserMessageUpdateOne {
	umuo.mutation.SetText(s)
	return umuo
}

// SetCtreatedAt sets the "ctreated_at" field.
func (umuo *UserMessageUpdateOne) SetCtreatedAt(t time.Time) *UserMessageUpdateOne {
	umuo.mutation.SetCtreatedAt(t)
	return umuo
}

// SetNillableCtreatedAt sets the "ctreated_at" field if the given value is not nil.
func (umuo *UserMessageUpdateOne) SetNillableCtreatedAt(t *time.Time) *UserMessageUpdateOne {
	if t != nil {
		umuo.SetCtreatedAt(*t)
	}
	return umuo
}

// Mutation returns the UserMessageMutation object of the builder.
func (umuo *UserMessageUpdateOne) Mutation() *UserMessageMutation {
	return umuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (umuo *UserMessageUpdateOne) Select(field string, fields ...string) *UserMessageUpdateOne {
	umuo.fields = append([]string{field}, fields...)
	return umuo
}

// Save executes the query and returns the updated UserMessage entity.
func (umuo *UserMessageUpdateOne) Save(ctx context.Context) (*UserMessage, error) {
	var (
		err  error
		node *UserMessage
	)
	if len(umuo.hooks) == 0 {
		node, err = umuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			umuo.mutation = mutation
			node, err = umuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(umuo.hooks) - 1; i >= 0; i-- {
			if umuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = umuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, umuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (umuo *UserMessageUpdateOne) SaveX(ctx context.Context) *UserMessage {
	node, err := umuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (umuo *UserMessageUpdateOne) Exec(ctx context.Context) error {
	_, err := umuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (umuo *UserMessageUpdateOne) ExecX(ctx context.Context) {
	if err := umuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (umuo *UserMessageUpdateOne) sqlSave(ctx context.Context) (_node *UserMessage, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   usermessage.Table,
			Columns: usermessage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: usermessage.FieldID,
			},
		},
	}
	id, ok := umuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserMessage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := umuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usermessage.FieldID)
		for _, f := range fields {
			if !usermessage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usermessage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := umuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := umuo.mutation.From(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usermessage.FieldFrom,
		})
	}
	if value, ok := umuo.mutation.To(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usermessage.FieldTo,
		})
	}
	if value, ok := umuo.mutation.Text(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usermessage.FieldText,
		})
	}
	if value, ok := umuo.mutation.CtreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: usermessage.FieldCtreatedAt,
		})
	}
	_node = &UserMessage{config: umuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, umuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usermessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
